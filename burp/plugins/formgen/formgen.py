#!/usr/bin/env python2
# encoding: utf-8

import logging
import re
from collections import namedtuple
from urllib import unquote_plus, quote_plus

from htmlentitydefs import name2codepoint

Form = namedtuple('Form', ['name', 'action', 'method', 'values'])

def unescape(s):
    "unescape HTML code refs; c.f. http://wiki.python.org/moin/EscapingHtml"
    s = re.sub('&(%s);' % '|'.join(name2codepoint),
              lambda m: unichr(name2codepoint[m.group(1)]), s)
    s = re.sub('&#(\d+);',
              lambda m: unichr(int(m.group(1))), s)
    s = re.sub('&#x([0-9a-fA-F]+);',
              lambda m: unichr(int(m.group(1), 16)), s)
    return s

def _get_attribute(name, html):
    value = re.search(r'{0}\s*=\s*("|\')(.*?)\1'.format(re.escape(name)), html, re.I)
    if value:
        return unescape(value.group(2))


def _get_tags(name, html, end_tag=False):
    h_lower = html.lower()
    inputs = []
    start = None
    while True:
        start = h_lower.find("<{0}".format(name), start)
        if start == -1:
            break
        inputs.append(start)
        start += 1

    for idx, start in enumerate(inputs):
        if end_tag:
            end = h_lower.find("</{0}".format(name), start)
            yield start, end, html[start:end+2+len(name)]
        else:
            current = start
            while True:
                end = h_lower.find(">", current)
                if end == -1:
                    break

                if html[start:end].count('"') % 2 == 0 and \
                   html[start:end].count("'") % 2 == 0:
                    yield start, end, html[start:end+1]
                    break
                else:
                    current = end + 1

def _get_inputs(html):
    return _get_tags('input', html)

def _get_selects(html):
    return _get_tags('select', html)

def _get_textareas(html):
    return _get_tags('textarea', html, True)

def _parse_tags(inputs):
    if isinstance(inputs, str):
        inputs = [inputs]

    for input in inputs:
        name = _get_attribute('name', input)
        value = _get_attribute('value', input)
        if name:
            yield name, value

def _parse_textareas(areas):
    if isinstance(areas, str):
        areas = [areas]

    for area in areas:
        a_lower = area.lower()
        end = a_lower.find(">")
        name = _get_attribute('name', area[:end])
        close = a_lower.find("</textarea")
        yield name, unescape(area[end+1:close])

def get_forms(html):
    h_lower = html.lower()
    forms = []
    start = None
    while True:
        start = h_lower.find("<form", start)
        if start == -1:
            break
        forms.append(start)
        start += 1

    for idx, start in enumerate(forms):
        end = h_lower.find("</form", start)
        forms[idx] = start, end

        logging.info("Found form in %d-%d", start, end)

    for start, end in forms:
        content = html[start:end]
        logging.debug("Found form: %s", content)
        name = _get_attribute('name', content)
        logging.info("Found name: %s", name)
        action = _get_attribute('action', content)
        logging.info("Found action: %s", action)
        method = _get_attribute('method', content)
        logging.info("Found method: %s", method)
        inputs = list(_get_inputs(content))
        logging.debug("Found inputs: %s", inputs)
        inputs = list(_parse_tags(i[2] for i in inputs))
        logging.info("Found inputs: %s", inputs)
        selects = list(_get_selects(content))
        logging.debug("Found selects: %s", selects)
        selects = list(_parse_tags(i[2] for i in selects))
        logging.info("Found selects: %s", selects)
        textareas = list(_get_textareas(content))
        logging.debug("Found textareas: %s", textareas)
        textareas = list(_parse_textareas(i[2] for i in textareas))
        logging.info("Found textareas: %s", textareas)

        yield Form(name, action, method, inputs + selects + textareas)

import platform
if platform.system() == 'Java':
    import burp
    from java.util import ArrayList
    from javax.swing import JMenuItem, JOptionPane
    from java.net import URL

    class BurpExtender(burp.IBurpExtender, burp.IContextMenuFactory):
        def registerExtenderCallbacks(self, callbacks):
            self.callbacks = callbacks
            callbacks.setExtensionName("Form Generator")
            callbacks.registerContextMenuFactory(self)
            self.helpers = callbacks.getHelpers()

        def createMenuItems(self, invocation):
            if invocation.getToolFlag() not in (self.callbacks.TOOL_PROXY, 
                                                self.callbacks.TOOL_REPEATER):
                return None

            item = JMenuItem("Generate request from form", actionPerformed=self.gen_form)
            items = ArrayList()
            items.add(item)
            self._msgs = invocation.getSelectedMessages()
            self._tool = invocation.getToolFlag()

            return items

        def gen_form(self, event):
            data = self._msgs[0].getResponse()
            resp = self.helpers.analyzeResponse(data)
            forms = list(get_forms(data[resp.getBodyOffset():].tostring()))
            if len(forms) == 0:
                print("No Forms")
                return


            data = self._msgs[0].getRequest()
            req = self.helpers.analyzeRequest(data)
            headers = req.getHeaders()
            if len(forms) > 1:
                possibilities = ["{0}: {1} ({2})".format(i+1, f.name, f.action)
                                  for i, f in enumerate(forms)];
                s = JOptionPane.showInputDialog(
                    None,
                    "Select a form:",
                    "Multiple Forms found",
                    JOptionPane.QUESTION_MESSAGE,
                    None,
                    possibilities,
                    possibilities[0]);
                if not s:
                    return
                form = forms[possibilities.index(s)]
            else:
                form = forms[0]

            path = headers[0].split(' ')[1]
            #url = req.getUrl()
            if form.action.startswith('/'):
                pass
                #if url.getHost() in path:
                #    u2 = URL(url.getProtocol(),
                #             url.getHost(),
                #             url.getPort(),
                #             form.action)
                #    path = u2.toString()
            else:
                path = path.split('?', 1)[0]
                if path.endswith('/'):
                    path += form.action
                else:
                    path = path.rsplit('/', 1)[0] + '/' + form.action

            values = []
            for name, value in form.values:
                if value is None:
                    value = ''
                values.append("{0}={1}".format(quote_plus(name), quote_plus(value)))
            data = '&'.join(values)

            if form.method == 'get':
                if '?' in path:
                    path += '&' + data
                else:
                    path += '?' + data
                data = ""
            req_headers = ["{0} {1} {2}".format(form.method.upper(),
                                                path,
                                                headers[0].rsplit(' ', 1)[1])]
            req_headers += headers[1:]

            req = self.helpers.buildHttpMessage(
                req_headers,
                self.helpers.stringToBytes(data)
            )

            class CookieParam(burp.IParameter):
                def __init__(self, name, value):
                    self._name = name
                    self._value= value

                def getType(self):
                    return 2

                def getName(self):
                    return self._name

                def getValue(self):
                    return self._value

                def getNameStart(self):
                    return -1
                getNameEnd = getNameStart
                getValueStart = getNameStart
                getValueEnd = getValueStart

            for cookie in resp.getCookies():
                param = CookieParam(cookie.getName(), cookie.getValue())
                req = self.helpers.removeParameter(req, param)
                req = self.helpers.addParameter(req, param)
            self._msgs[0].setRequest(req)

if __name__ == '__main__':
    import sys
#    logging.basicConfig(level="DEBUG")

    for form in get_forms(sys.stdin.read()):
        print("Action: {0}".format(form.action))
        print("Method: {0}".format(form.method))
        values = []
        for name, value in form.values:
            if value is None:
                value = ''
            values.append("{0}={1}".format(quote_plus(name), quote_plus(value)))
    
        print("Data:\n{0}\n".format('&'.join(values)))
