package burp;

import java.util.List;
import java.util.ArrayList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import java.net.URL;
import eu.bluec0re.burp.*;

public class BurpExtender implements IBurpExtender, IContextMenuFactory {
    private IBurpExtenderCallbacks callbacks;
    private IExtensionHelpers helper;
    private IHttpRequestResponse[] messages;

    public void registerExtenderCallbacks(IBurpExtenderCallbacks callbacks) {
        this.callbacks = callbacks;
        this.helper = callbacks.getHelpers();
        callbacks.setExtensionName("Form Generator");
        callbacks.registerContextMenuFactory(this);
    }

    public List<JMenuItem> createMenuItems(IContextMenuInvocation invocation) {
        if(invocation.getToolFlag() != IBurpExtenderCallbacks.TOOL_REPEATER)
            return null;

        messages = invocation.getSelectedMessages();
        JMenuItem item = new JMenuItem("Generate request from form");

        item.addActionListener(
                new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(java.awt.event.ActionEvent e) {
                        BurpExtender.this.genForm();
                    }
                }
        );

        ArrayList<JMenuItem> items = new ArrayList<JMenuItem>();
        items.add(item);
        return items;
    }

    private void genForm() {
        byte[] respData = messages[0].getResponse();
        IResponseInfo resp = helper.analyzeResponse(respData);
        FormExtractor formex = new FormExtractor();
        String tmp = helper.bytesToString(respData);
        List<Form> forms = formex.extractForms(tmp.substring(resp.getBodyOffset()));

        Form form = null;
        switch(forms.size()) {
            case 0:
                JOptionPane.showMessageDialog(
                        null,
                        "No Forms found",
                        "No Forms found",
                        JOptionPane.ERROR_MESSAGE);
                return;
            case 1:
                form = forms.get(0);
                break;
            default: {
                JOptionPane.showMessageDialog(
                        null,
                        "Multiple Forms found",
                        "Multiple Forms found",
                        JOptionPane.WARNING_MESSAGE);

                String[] options = new String[forms.size()];
                int i = 0;
                for(Form f : forms) {
                    StringBuilder sb = new StringBuilder();
                    sb.append(i+1);
                    sb.append(": ");
                    sb.append(f.getName());
                    sb.append(" (").append(f.getAction()).append(")");
                    options[i] = sb.toString();
                    i++;
                }

                String s = (String)JOptionPane.showInputDialog(
                        null,
                        "Select a form:",
                        "Multiple forms found",
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        options,
                        options[0]);
                if(s == null)
                    return;
                else {
                    for(i = 0; i < options.length; i++) {
                        if(options[i].equals(s)) {
                            form = forms.get(i);
                            break;
                        }
                    }
                }
            }
        }

        byte[] reqData = messages[0].getRequest();
        IRequestInfo req = helper.analyzeRequest(reqData);
        List<String> headers = req.getHeaders();
        String path = headers.get(0).split(" ")[1];


        if(form.getAction() != null && form.getAction().startsWith("/")) {
            URL url = req.getUrl();
            if(path.contains(url.getHost())) {
                try {
                    url = new URL(url.getProtocol(),
                                  url.getHost(),
                                  url.getPort(),
                                  form.getAction());

                    path = url.toString();
                } catch(java.net.MalformedURLException e) {
                    path = form.getAction();
                }
            } else {
                path = form.getAction();
            }
        } else {
            path = path.split("\\?")[0];
            if(form.getAction() != null) {
                if(path.endsWith("/")) {
                    path += form.getAction();
                } else {
                    path = path.substring(0, path.lastIndexOf('/')+1) + form.getAction();
                }
            }
        }

        String postData = "";
        String method = "GET";
        if(form.getMethod() != null && !"".equals(form.getMethod())) {
            method = form.getMethod().toUpperCase();
        }

        if(!method.equals("POST")) {
            if(path.contains("?"))
                path += '&' + form.getData();
            else
                path += '?' + form.getData();
        } else
            postData = form.getData();

        ArrayList<String> newHeaders = new ArrayList<String>();
        tmp = method + ' ' + path + ' ' + headers.get(0).split(" ")[2];

        newHeaders.addAll(headers);
        newHeaders.set(0, tmp);

        byte[] newmsg = helper.buildHttpMessage(newHeaders,
                    helper.stringToBytes(postData));

        for(ICookie cookie : resp.getCookies()) {
            IParameter param = helper.buildParameter(cookie.getName(),
                                                     cookie.getValue(),
                                                     IParameter.PARAM_COOKIE);
            newmsg = helper.removeParameter(newmsg, param);
            newmsg = helper.addParameter(newmsg, param);
        }

        messages[0].setRequest(newmsg);
    }
}
