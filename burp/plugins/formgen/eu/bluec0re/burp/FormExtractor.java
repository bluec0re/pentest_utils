package eu.bluec0re.burp;

import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.List;
import java.util.ArrayList;

public class FormExtractor {
    private class Occurence {
        public int start;
        public int end;
        public CharSequence data;
    }

    protected String unescape(String value) {
        Pattern pattern = Pattern.compile("&#(\\d+);");
        Matcher m = pattern.matcher(value);
        while(m.find()) {
            char code = (char)Integer.parseInt(m.group(1));
            value = value.replace(m.group(), Character.valueOf(code).toString());
        }

        pattern = Pattern.compile("&#x([0-9a-f]+);",
                                  Pattern.CASE_INSENSITIVE);
        m = pattern.matcher(value);
        while(m.find()) {
            char code = (char)Integer.parseInt(m.group(1), 16);
            value = value.replace(m.group(), Character.valueOf(code).toString());
        }
        /*
        pattern = Pattern.compile("&#x([0-9a-f]+);",
                                  Pattern.CASE_INSENSITIVE);
        m = pattern.matcher(value);
        while(m.find()) {
            int code = Integer.parseInt(m.group(1), 16);
            value = value.replace(m.group(), Character.valueOf(code));
        }
*/
        return value;
    }

    protected String extractAttribute(String name, CharSequence html) {
        Pattern pattern = Pattern.compile(Pattern.quote(name) +
                                          "\\s*=\\s*(\"|')(.*?)\\1",
                                          Pattern.CASE_INSENSITIVE);

        Matcher m = pattern.matcher(html);
        if(m.find())
            return unescape(m.group(2));
        else
            return null;
    }

    protected List<Occurence> extractTags(String name, CharSequence html, boolean endTag) {
        String hlower = html.toString().toLowerCase();
        ArrayList<Occurence> occurences = new ArrayList<Occurence>();
        int start = 0;
        String startTag = "<" + name;
        do {
            start = hlower.indexOf(startTag, start);
            if(start != -1) {
                Occurence o = new Occurence();
                o.start = start;
                occurences.add(o);
                start++;
            }
        } while(start != -1);

        String endTagName = "</" + name;
        for(Occurence o : occurences) {
            if(endTag) {
                o.end = hlower.indexOf(endTagName, o.start) + endTagName.length() + 1;
                o.data = html.subSequence(o.start, o.end);
            } else {
                o.end = hlower.indexOf('>', o.start) + 2;
                o.data = html.subSequence(o.start, o.end);
                /*
                int current = o.start;
                while(current != -1) {
                    
                }*/
            }
        }

        return occurences;
    }

    protected List<Occurence> extractInputs(CharSequence html) {
        return extractTags("input", html, false);
    }

    protected List<Occurence> extractSelects(CharSequence html) {
        return extractTags("select", html, false);
    }

    protected List<Occurence> extractTextareas(CharSequence html) {
        return extractTags("textarea", html, true);
    }

    protected Parameter parseTag(Occurence occ) {
        String name = extractAttribute("name", occ.data);
        String value = extractAttribute("value", occ.data);

        return new Parameter(name, value);
    }

    protected List<Parameter> parseTags(List<Occurence> occs) {
        ArrayList<Parameter> params = new ArrayList<Parameter>();
        for(Occurence occ : occs) {
            params.add(parseTag(occ));
        }
        return params;
    }

    protected Parameter parseTextarea(Occurence occ) {
        String area = occ.data.toString().toLowerCase();
        int end = area.indexOf('>');
        String name = extractAttribute("name", area.subSequence(0, end));
        int end2 = area.indexOf("</textarea", end);
        CharSequence value = occ.data.subSequence(end+1, end2);

        return new Parameter(name, value);
    }

    protected List<Parameter> parseTextareas(List<Occurence> occs) {
        ArrayList<Parameter> params = new ArrayList<Parameter>();
        for(Occurence occ : occs) {
            params.add(parseTextarea(occ));
        }
        return params;
    }

    public List<Form> extractForms(CharSequence html) {
        List<Occurence> formOcc = extractTags("form", html, true);

        ArrayList<Form> forms = new ArrayList<Form>();
        for(Occurence fo : formOcc) {
            String name = extractAttribute("name", fo.data);
            String action = extractAttribute("action", fo.data);
            String method = extractAttribute("method", fo.data);

            List<Parameter> inputs = parseTags(extractInputs(fo.data));
            List<Parameter> selects = parseTags(extractSelects(fo.data));
            List<Parameter> textareas = parseTextareas(extractTextareas(fo.data));
            ArrayList<Parameter> params = new ArrayList<Parameter>();
            params.addAll(inputs);
            params.addAll(selects);
            params.addAll(textareas);
            Form form = new Form(name, action, method, params);
            forms.add(form);
        }

        return forms;
    }
}
