#!/usr/bin/env python2
# encoding: utf-8
from __future__ import print_function, unicode_literals

from ctypes import *
import sys
import argparse
import struct
import codecs


CRYPTO_LIB = "libcrypto.so"

SECRET_LEN = 6


def calc_padding(msglen):
    l = (msglen + SECRET_LEN)
    cnt = (63 - 8 - (l % 64))
    padding = b'\x80' + b'\x00' * cnt
    padding += struct.pack("<Q", l * 8)
    return padding

parser = argparse.ArgumentParser()
parser.add_argument("OLD")
parser.add_argument("HASH")
parser.add_argument("EXT")

args = parser.parse_args()

A, B, C, D = struct.unpack("<IIII", codecs.decode(args.HASH, "hex"))

pad = calc_padding(len(args.OLD))


class MD5_CTX(Structure):
    _fields_ = [
            ('A', c_uint),
            ('B', c_uint),
            ('C', c_uint),
            ('D', c_uint),
            ('Nl', c_uint),
            ('Nh', c_uint),
            ('data', c_uint * 16),
            ('num', c_uint)
            ]

libcrypto = cdll.LoadLibrary(CRYPTO_LIB)
MD5_Init = libcrypto.MD5_Init
MD5_Init.argtypes = [POINTER(MD5_CTX)]
MD5_Init.restype = c_int
MD5_Update = libcrypto.MD5_Update
MD5_Update.argtypes = [POINTER(MD5_CTX), c_void_p, c_ulong]
MD5_Update.restype = c_int
MD5_Final = libcrypto.MD5_Final
MD5_Final.argtypes = [c_char_p, POINTER(MD5_CTX)]
MD5_Final.restype = c_int

ctx = MD5_CTX()
pctx = byref(ctx)
MD5_Init(pctx)
MD5_Update(pctx, b"A" * SECRET_LEN + args.OLD.encode(), 64)

ctx.A, ctx.B, ctx.C, ctx.D = A, B, C, D
MD5_Update(pctx, args.EXT, len(args.EXT))

buf = create_string_buffer(16)
MD5_Final(buf, pctx)


sys.stdout.write(args.OLD + pad + args.EXT)
sys.stdout.write("\n")
print(codecs.encode(buf.raw, 'hex'))

